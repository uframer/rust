.TH RUSTC "1" "September 2016" "rustc 1.13.0" "User Commands"
.SH NAME
rustc \- Rust编译器
.SH SYNOPSIS
.B rustc
[\fIOPTIONS\fR] \fIINPUT\fR

.SH DESCRIPTION
Rust语言的编译器，网站是https://www.rust\-lang.org。

.SH OPTIONS

.TP
\fB\-h\fR, \fB\-\-help\fR
显示帮助消息。
.TP
\fB\-\-cfg\fR \fISPEC\fR
配置编译环境。
.TP
\fB\-L\fR [\fIKIND\fR=]\fIPATH\fR
将一个目录添加到库的搜索路径中。
其中，可选的\fIKIND\fR取值可以是：
.RS
.TP
\fBdependency\fR
只查找传递依赖关系
.TP
.B crate
只查找本地的`extern crate`指令给出的crate
.TP
.B native
只查找原生库
.TP
.B framework
只查找OSX framework
.TP
.B all
查找所有内容（这是默认值）
.RE
.TP
\fB\-l\fR [\fIKIND\fR=]\fINAME\fR
将生成的crate(s)链接到指定的库\fINAME\fR。
\fIKIND\fR的可选值包括\fIstatic\fR、\fIdylib\fR或者\fIframework\fR。
如果忽略这个选项，那么默认会使用\fIdylib\fR。
.TP
\fB\-\-crate\-type\fR [bin|lib|rlib|dylib|cdylib|staticlib]
由逗号分隔的类型列表，控制编译器输出哪些类型的crate。
.TP
\fB\-\-crate\-name\fR \fINAME\fR
指定正在构建的crate的名字。
.TP
\fB\-\-emit\fR [asm|llvm\-bc|llvm\-ir|obj|link|dep\-info][=\fIPATH\fR]
配置\fBrustc\fR输出什么内容。每种输出选项还可以带有一个可选的\fIPATH\fR来指定这种输出内容的输出路径。这里指定的路径优先于\fB-o\fR选项指定的路径。
.TP
\fB\-\-print\fR [crate\-name|file\-names|sysroot]
由逗号分隔的列表，指定要在标准输出上打印哪些编译器信息。
.TP
\fB\-g\fR
等价于\fI\-C\ debuginfo=2\fR。
.TP
\fB\-O\fR
等价于\fI\-C\ opt\-level=2\fR。
.TP
\fB\-o\fR \fIFILENAME\fR
将输出写入\fIFILENAME\fR文件。如果\fI\-\-emit\fR指定了输出路径，就使用果\fI\-\-emit\fR指定的路径；否则，就使用这里指定的路径。
.TP
\fB\-\-out\-dir\fR \fIDIR\fR
Write output to compiler\[hy]chosen filename in \fIDIR\fR. Ignored if \fI\-o\fR is specified.
Defaults to the current directory.
.TP
\fB\-\-explain\fR \fIOPT\fR
提供错误信息的详细解释。
.TP
\fB\-\-test\fR
Build a test harness.
.TP
\fB\-\-target\fR \fITARGET\fR
设置目标三元组。这个选项的默认值是宿主系统的目标三元组。目标三元素的通用格式是<arch><sub>\-<vendor>\-<sys>\-<abi>，其中：
.RS
.TP
.B <arch>
x86、arm、thumb、mips等。
.TP
.B <sub>
例如在ARM上，可以为：v5、v6m、v7a、v7m等。
.TP
.B <vendor>
pc、apple、nvidia、ibm等。
.TP
.B <sys>
none、linux、win32、darwin、cuda等。
.TP
.B <abi>
eabi、gnu、android、macho、elf等。
.RE
.TP
\fB\-W help\fR
打印'lint'选项和默认设置。
.TP
\fB\-W\fR \fIOPT\fR, \fB\-\-warn\fR \fIOPT\fR
设置lint警告选项。
.TP
\fB\-A\fR \fIOPT\fR, \fB\-\-allow\fR \fIOPT\fR
设置lint允许选项。
.TP
\fB\-D\fR \fIOPT\fR, \fB\-\-deny\fR \fIOPT\fR
设置lint拒绝选项。
.TP
\fB\-F\fR \fIOPT\fR, \fB\-\-forbid\fR \fIOPT\fR
设置lint禁止选项。
.TP
\fB\-C\fR \fIFLAG\fR[=\fIVAL\fR], \fB\-\-codegen\fR \fIFLAG\fR[=\fIVAL\fR]
Set a codegen\[hy]related flag to the value specified.
Use \fI\-C help\fR to print available flags.
See CODEGEN OPTIONS below.
.TP
\fB\-V\fR, \fB\-\-version\fR
打印版本信息并退出。
.TP
\fB\-v\fR, \fB\-\-verbose\fR
使用verbose输出模式。
.TP
\fB\-\-extern\fR \fINAME\fR=\fIPATH\fR
Specify where an external rust library is located. These should match
\fIextern\fR declarations in the crate's source code.
.TP
\fB\-\-sysroot\fR \fIPATH\fR
Override the system root.
.TP
\fB\-Z\fR \fIFLAG\fR
设置内部调试选项。使用\fI\-Z help\fR可以列出可用的选项。
.TP
\fB\-\-color\fR auto|always|never
配置输出的色彩选项：
.RS
.TP
.B auto
如果输出到一个tty，那么使用色彩（默认值）；
.TP
.B always
总是使用色彩；
.TP
.B never
永远不使用色彩。
.RE

.SH CODEGEN OPTIONS

.TP
\fBar\fR=\fI/path/to/ar\fR
指定归档工具的路径。
.TP
\fBlinker\fR=\fI/path/to/cc\fR
指定链接器的路径。
.TP
\fBlink\-args\fR='\fI\-flag1 \-flag2\fR'
A space\[hy]separated list of extra arguments to pass to the linker when the linker
is invoked.
.TP
\fBlto\fR
执行LLVM链接时优化。
.TP
\fBtarget\-cpu\fR=\fIhelp\fR
选择目标处理器。如果这个值是'help'，那么会列出可用的CPU。
.TP
\fBtarget\-feature\fR='\fI+feature1\fR,\fI\-feature2\fR'
A comma\[hy]separated list of features to enable or disable for the target.
A preceding '+' enables a feature while a preceding '\-' disables it.
Available features can be discovered through \fIllc -mcpu=help\fR.
.TP
\fBpasses\fR=\fIval\fR
A space\[hy]separated list of extra LLVM passes to run.
A value of 'list' will cause \fBrustc\fR to print all known passes and
exit.
The passes specified are appended at the end of the normal pass manager.
.TP
\fBllvm\-args\fR='\fI\-arg1\fR \fI\-arg2\fR'
A space\[hy]separated list of arguments to pass through to LLVM.
.TP
\fBsave\-temps\fR
If specified, the compiler will save more files (.bc, .o, .no\-opt.bc) generated
throughout compilation in the output directory.
.TP
\fBrpath\fR
If specified, then the rpath value for dynamic libraries will be set in
either dynamic library or executable outputs.
.TP
\fBno\-prepopulate\-passes\fR
Suppresses pre\[hy]population of the LLVM pass manager that is run over the module.
.TP
\fBno\-vectorize\-loops\fR
Suppresses running the loop vectorization LLVM pass, regardless of optimization
level.
.TP
\fBno\-vectorize\-slp\fR
Suppresses running the LLVM SLP vectorization pass, regardless of optimization
level.
.TP
\fBsoft\-float\fR
Generates software floating point library calls instead of hardware
instructions.
.TP
\fBprefer\-dynamic\fR
Prefers dynamic linking to static linking.
.TP
\fBno\-integrated\-as\fR
Force usage of an external assembler rather than LLVM's integrated one.
.TP
\fBno\-redzone\fR
Disable the use of the redzone.
.TP
\fBrelocation\-model\fR=[pic,static,dynamic\-no\-pic]
The relocation model to use.
(Default: \fIpic\fR)
.TP
\fBcode\-model\fR=[small,kernel,medium,large]
Choose the code model to use.
.TP
\fBmetadata\fR=\fIval\fR
Metadata to mangle symbol names with.
.TP
\fBextra\-filename\fR=\fIval\fR
Extra data to put in each output filename.
.TP
\fBcodegen\-units\fR=\fIn\fR
Divide crate into \fIn\fR units to optimize in parallel.
.TP
\fBremark\fR=\fIval\fR
Print remarks for these optimization passes (space separated, or "all").
.TP
\fBno\-stack\-check\fR
Disable checks for stack exhaustion (a memory\[hy]safety hazard!).
.TP
\fBdebuginfo\fR=\fIval\fR
Debug info emission level:
.RS
.TP
.B 0
no debug info;
.TP
.B 1
line\[hy]tables only (for stacktraces and breakpoints);
.TP
.B 2
full debug info with variable and type information.
.RE
.TP
\fBopt\-level\fR=\fIVAL\fR
Optimize with possible levels 0\[en]3

.SH ENVIRONMENT

Some of these affect the output of the compiler, while others affect programs
which link to the standard library.

.TP
\fBRUST_TEST_THREADS\fR
The test framework Rust provides executes tests in parallel. This variable sets
the maximum number of threads used for this purpose. This setting is overridden
by the --test-threads option.

.TP
\fBRUST_TEST_NOCAPTURE\fR
If set to a value other than "0", a synonym for the --nocapture flag.

.TP
\fBRUST_MIN_STACK\fR
Sets the minimum stack size for new threads.

.TP
\fBRUST_BACKTRACE\fR
If set to a value different than "0", produces a backtrace in the output of a program which panics.

.SH "EXAMPLES"
To build an executable from a source file with a main function:
    $ rustc \-o hello hello.rs

To build a library from a source file:
    $ rustc \-\-crate\-type=lib hello\-lib.rs

To build either with a crate (.rs) file:
    $ rustc hello.rs

To build an executable with debug info:
    $ rustc \-g \-o hello hello.rs

.SH "SEE ALSO"

.BR rustdoc (1)

.SH "BUGS"
See https://github.com/rust\-lang/rust/issues for issues.

.SH "AUTHOR"
See https://github.com/rust\-lang/rust/graphs/contributors or use `git log --all --format='%cN <%cE>' | sort -u` in the rust source distribution.

.SH "COPYRIGHT"
This work is dual\[hy]licensed under Apache\ 2.0 and MIT terms.
See \fICOPYRIGHT\fR file in the rust source distribution.
